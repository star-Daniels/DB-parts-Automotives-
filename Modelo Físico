CREATE DATABASE oficina;
USE oficina;

CREATE TABLE clientes (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nome VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    telefone VARCHAR(20),
    cep VARCHAR(10),
    endereco VARCHAR(255),
    cidade VARCHAR(100),
    estado VARCHAR(50)
);

CREATE TABLE fornecedores (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nome VARCHAR(255) NOT NULL,
    telefone VARCHAR(20),
    email VARCHAR(255),
    cep VARCHAR(10),
    endereco VARCHAR(255),
    cidade VARCHAR(100),
    estado VARCHAR(50)
);

CREATE TABLE categorias (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nome VARCHAR(100) NOT NULL,
    descricao TEXT
);

CREATE TABLE produtos (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nome VARCHAR(255) NOT NULL,
    categoria_id INT,
    fornecedor_id INT,
    preco DECIMAL(10, 2) NOT NULL,
    quantidade_em_estoque INT NOT NULL,
    FOREIGN KEY (categoria_id) REFERENCES categorias(id),
    FOREIGN KEY (fornecedor_id) REFERENCES fornecedores(id)
);

CREATE TABLE vendas (
    id INT PRIMARY KEY AUTO_INCREMENT,
    cliente_id INT,
    data_venda DATE DEFAULT NOW(),
    valor_total DECIMAL(10, 2) NOT NULL,
    status ENUM('Pendente', 'Concluida', 'Canceleda') DEFAULT 'Pendente',
    FOREIGN KEY (cliente_id) REFERENCES clientes(id)
);

CREATE TABLE itens_venda (
    id INT PRIMARY KEY AUTO_INCREMENT,
    venda_id INT,
    produto_id INT,
    quantidade INT NOT NULL,
    preco_total DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (venda_id) REFERENCES vendas(id),
    FOREIGN KEY (produto_id) REFERENCES produtos(id)
);

CREATE TABLE pagamentos (
    id INT PRIMARY KEY AUTO_INCREMENT,
    venda_id INT,
    forma_pagamento ENUM('cartão', 'boleto', 'dinheiro') NOT NULL,
    valor_pago DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (venda_id) REFERENCES vendas(id)
);

CREATE TABLE estoque_movimentacao (
    id INT PRIMARY KEY AUTO_INCREMENT,
    produto_id INT,
    tipo_movimentacao ENUM('entrada', 'saída') NOT NULL,
    quantidade INT NOT NULL,
    FOREIGN KEY (produto_id) REFERENCES produtos(id)
);


DELIMITER $$
CREATE TRIGGER novo_estoque
AFTER INSERT ON itens_venda
FOR EACH ROW
BEGIN
    UPDATE produtos
    SET quantidade = quantidade - NEW.quantidade
    WHERE id = NEW.produto_id;

    INSERT INTO estoque_movimentacao (produto_id, tipo_movimentacao, quantidade)
    VALUES (NEW.produto_id, 'saída', NEW.quantidade);
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER voltar_estoque
AFTER DELETE ON itens_venda
FOR EACH ROW
BEGIN
    UPDATE produtos
    SET quantidade = quantidade + OLD.quantidade
    WHERE id = OLD.produto_id;

    INSERT INTO estoque_movimentacao (produto_id, tipo_movimentacao, quantidade)
    VALUES (OLD.produto_id, 'entrada', OLD.quantidade);
END$$
DELIMITER ;


DELIMITER $$
CREATE TRIGGER novo_status_pagamento
AFTER INSERT ON pagamentos
FOR EACH ROW
BEGIN
    DECLARE total_pago DECIMAL(10, 2);

    SELECT SUM(valor_pago) INTO total_pago
    FROM pagamentos
    WHERE venda_id = NEW.venda_id;

    IF total_pago >= (SELECT valor_total FROM vendas WHERE id = NEW.venda_id) THEN
        UPDATE vendas
        SET status = 'Concluida'
        WHERE id = NEW.venda_id;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE todas_vendas (IN p_cliente_id INT)
BEGIN
    SELECT v.id AS venda_id, 
           v.data_venda, 
           v.valor_total, 
           v.status,
           GROUP_CONCAT(CONCAT(p.nome, ' (', iv.quantidade, ')')) AS itens
    FROM vendas v
    JOIN itens_venda iv ON v.id = iv.venda_id
    JOIN produtos p ON iv.produto_id = p.id
    WHERE v.cliente_id = p_cliente_id
    GROUP BY v.id
    ORDER BY v.data_venda DESC;
END$$
DELIMITER ;

CALL todas_vendas(1);


CREATE FUNCTION preco_total(valor DECIMAL, qtd INT)
RETURNS INT
RETURN valor*qtd;

CREATE FUNCTION novo_estoque(qtd_anterior INT, qtd_retirada INT)
RETURNS INT
RETURN qtd_anterior - qtd_retirada;

INSERT INTO clientes (nome, email, telefone, cep, endereco, cidade, estado) 
VALUES("Pedro Ferreira", "pedrindomel23@gmail.com", "75981652872", "43075721", "rua buenos aires", "Feira de Santana", "Bahia");

INSERT INTO clientes (nome, email, telefone, cep, endereco, cidade, estado) 
VALUES("Joao Saturino", "joaolinux13@gmail.com", "75991582872", "44075721", "rua Brasil", "Feira de Santana", "Bahia");

INSERT INTO clientes (nome, email, telefone, cep, endereco, cidade, estado) 
VALUES("Matheus Alcatra", "mateusaucanta@gmail.com", "75981652332", "43045721", "rua Volta Redonda", "Feira de Santana", "Bahia");

INSERT INTO clientes (nome, email, telefone, cep, endereco, cidade, estado) 
VALUES("Sayd Aires", "ibatman@gmail.com", "75982582332", "43045721", "rua Olimpicos", "Feira de Santana", "Bahia");

INSERT INTO clientes (nome, email, telefone, cep, endereco, cidade, estado) 
VALUES("Maria Luiza", "luliz@gmail.com", "75975682452", "43054721", "rua Senegal", "Feira de Santana", "Bahia");

INSERT INTO fornecedores(nome, telefone, email, cep, endereco, cidade, estado)
VALUES("Motorhigh","(71)99232-9393","chaimae2539@uorak.com","41214-375","4ª Travessa Samuel","Salvador","Bahia");

INSERT INTO fornecedores(nome, telefone, email, cep, endereco, cidade, estado)
VALUES("Chapas e cia","(71)98232-9393","chapase539@gmail.com","41339-352","Caminho 08-Quadra C","Salvador","Bahia");

INSERT INTO categorias(nome, descricao)
VALUES ("Peças_Motor", "Peças de motor em geral");

INSERT INTO categorias(nome, descricao)
VALUES ("Chaparia", "Externa do carro em geral como parachoques saias laterais etc");

INSERT INTO produtos(nome, categoria_id,fornecedor_id, preco, quantidade_em_estoque)
VALUES("Pistão", 1, 1, 230.4, 300);

INSERT INTO produtos(nome, categoria_id,fornecedor_id, preco, quantidade_em_estoque)
VALUES("Virabrequim", 1, 1, 403.99, 520);

INSERT INTO produtos(nome, categoria_id,fornecedor_id, preco, quantidade_em_estoque)
VALUES("Motor", 1, 1, 5789.49, 20);

INSERT INTO produtos(nome, categoria_id,fornecedor_id, preco, quantidade_em_estoque)
VALUES("Parachoque Frontal e Traseiro", 2, 2, 700.9, 200);

INSERT INTO produtos(nome, categoria_id,fornecedor_id, preco, quantidade_em_estoque)
VALUES("Saia Lateral", 2, 2, 346.05, 400);

INSERT INTO vendas (cliente_id, data_venda, valor_total)
VALUES (1, '03-09-2024', 346.05);


INSERT INTO vendas (cliente_id, data_venda, valor_total)
VALUES (2, '20-11-2024', 1100.9);


INSERT INTO vendas (cliente_id, data_venda, valor_total, status)
VALUES (3, '07-11-2024', 6836.44, 'Concluida');

INSERT INTO itens_venda (venda_id, produto_id, quantidade, preco_total)
VALUES 
(1, 5, 1, 346.05);

INSERT INTO itens_venda (venda_id, produto_id, quantidade, preco_total)
VALUES 
(2, 4, 1, 700.9), 
(2, 5, 1, 346.05);  

INSERT INTO itens_venda (venda_id, produto_id, quantidade, preco_total)
VALUES 
(3, 3, 1, 5789.49),  
(3, 4, 1, 700.9),
(3, 5, 1, 346.05);  

UPDATE produtos
SET preco = 208.99
WHERE id = 1;

UPDATE clientes
SET email = "ihatebatman@gmail.com"
WHERE id = 4;

UPDATE fornecedores
SET email = "chapasecia59@gmail.com"
WHERE id = 2;

DELETE FROM produtos
WHERE id = 1;

DELETE FROM produtos
WHERE id = 2;

DELETE FROM clientes
WHERE id = 4;

CREATE VIEW V_Todos_Clientes AS
Select * FROM clientes;

CREATE VIEW V_total_gasto AS
SELECT c.id, c.nome, SUM(v.valor_total) AS total_gasto
FROM clientes c
JOIN vendas v ON c.id = v.cliente_id
GROUP BY c.id, c.nome;

CREATE VIEW V_categoria AS
SELECT p.nome AS produto, c.nome AS categoria
FROM produtos p
JOIN categorias c ON p.categoria_id = c.id;

CREATE VIEW V_produtos_mais_vendidos AS
SELECT p.id, p.nome, SUM(iv.quantidade) AS total_vendido
FROM itens_venda iv
JOIN produtos p ON iv.produto_id = p.id
GROUP BY p.id, p.nome
ORDER BY total_vendido DESC;

CREATE VIEW V_todos_fornecedores AS
SELECT * FROM fornecedores;

CREATE VIEW view_produtos_por_fornecedor AS
SELECT f.nome AS fornecedor, p.nome AS produto
FROM produtos p
JOIN fornecedores f ON p.fornecedor_id = f.id;

CREATE VIEW V_todas_vendas AS
SELECT * FROM vendas;

CREATE VIEW V_todos_itens_vendidos AS
SELECT * FROM itens_venda;

CREATE VIEW V_todas_movimentacoes AS
SELECT * FROM estoque_movimentacao;

CREATE VIEW V_vendas_recentes AS
SELECT *
FROM vendas v
JOIN clientes c ON v.cliente_id = c.id
WHERE v.data_venda >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)
ORDER BY v.data_venda DESC;
